#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int src, dest, weight;
};

void printPath(int vertex, vector<int>& parent) {
    if (parent[vertex] == -1) {
        cout << vertex + 1;
        return;
    }
    printPath(parent[vertex], parent);
    cout << " " << vertex + 1;
}

int main() {
    int V;
    cin >> V;

    vector<vector<int>> adjMatrix(V, vector<int>(V));
    vector<Edge> edges;

    // Reading the adjacency matrix and building the edge list
    for (int i = 0; i < V; ++i)
        for (int j = 0; j < V; ++j) {
            cin >> adjMatrix[i][j];
            if (adjMatrix[i][j] != 0)
                edges.push_back({i, j, adjMatrix[i][j]});
        }

    int src;
    cin >> src;
    src--; // converting to 0-based index

    vector<int> dist(V, INF);
    vector<int> parent(V, -1);
    dist[src] = 0;

    // Bellman-Ford algorithm
    for (int i = 1; i < V; ++i) {
        for (Edge e : edges) {
            if (dist[e.src] != INF && dist[e.src] + e.weight < dist[e.dest]) {
                dist[e.dest] = dist[e.src] + e.weight;
                parent[e.dest] = e.src;
            }
        }
    }

    // Output the shortest paths
    for (int i = 0; i < V; ++i) {
        printPath(i, parent);
        cout << " : ";
        if (dist[i] == INF)
            cout << "INF";
        else
            cout << dist[i];
        cout << endl;
    }

    return 0;
}














#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int src, dest, weight;
};

void printPath(int vertex, const vector<int>& parent) {
    if (parent[vertex] == -1) {
        cout << vertex + 1;
        return;
    }
    printPath(parent[vertex], parent);
    cout << " " << vertex + 1;
}

int main() {
    int V;
    cin >> V;

    vector<vector<int>> adjMatrix(V, vector<int>(V));
    vector<Edge> edges;

    // Reading adjacency matrix and creating edge list
    for (int i = 0; i < V; ++i)
        for (int j = 0; j < V; ++j) {
            cin >> adjMatrix[i][j];
            if (adjMatrix[i][j] != 0)
                edges.push_back({i, j, adjMatrix[i][j]});
        }

    int src;
    cin >> src;
    src--; // Convert to 0-based index

    vector<int> dist(V, INF);
    vector<int> parent(V, -1);
    dist[src] = 0;

    // Bellman-Ford Algorithm
    for (int i = 1; i < V; ++i) {
        for (const Edge& e : edges) {
            if (dist[e.src] != INF && dist[e.src] + e.weight < dist[e.dest]) {
                dist[e.dest] = dist[e.src] + e.weight;
                parent[e.dest] = e.src;
            }
        }
    }

    // Output result
    for (int i = 0; i < V; ++i) {
        printPath(i, parent);
        cout << " : ";
        if (dist[i] == INF)
            cout << "INF";
        else
            cout << dist[i];
        cout << endl;
    }

    return 0;
}











#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int src, dest, weight;
};

// Safe recursive path printing (detects cycles)
void printPath(int vertex, vector<int>& parent, vector<bool>& visited) {
    if (visited[vertex]) {
        cout << " (cycle detected)";
        return;
    }
    visited[vertex] = true;

    if (parent[vertex] == -1) {
        cout << vertex + 1;
        return;
    }

    printPath(parent[vertex], parent, visited);
    cout << " " << vertex + 1;
}

int main() {
    int V;
    cin >> V;

    vector<vector<int>> adjMatrix(V, vector<int>(V));
    vector<Edge> edges;

    // Read adjacency matrix and build edge list
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> adjMatrix[i][j];
            if (adjMatrix[i][j] != 0) {
                edges.push_back({i, j, adjMatrix[i][j]});
            }
        }
    }

    int src;
    cin >> src;
    src--; // Convert to 0-based index

    vector<int> dist(V, INF);
    vector<int> parent(V, -1);
    dist[src] = 0;

    // Bellman-Ford algorithm
    for (int i = 1; i < V; ++i) {
        for (Edge e : edges) {
            if (dist[e.src] != INF && dist[e.src] + e.weight < dist[e.dest]) {
                dist[e.dest] = dist[e.src] + e.weight;
                parent[e.dest] = e.src;
            }
        }
    }

    // Negative weight cycle detection
    for (Edge e : edges) {
        if (dist[e.src] != INF && dist[e.src] + e.weight < dist[e.dest]) {
            cout << "Graph contains a negative weight cycle" << endl;
            return 0;
        }
    }

    // Output shortest paths and distances
    cout << "Shortest paths from source vertex " << src + 1 << ":\n";
    for (int i = 0; i < V; ++i) {
        vector<bool> visited(V, false); // Reset for each vertex
        printPath(i, parent, visited);
        cout << " : ";
        if (dist[i] == INF)
            cout << "INF";
        else
            cout << dist[i];
        cout << endl;
    }

    return 0;
}














import java.io.*;

public class SimplePalindromeCounter {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
        String line;
        int lineNumber = 1;

        while ((line = reader.readLine()) != null) {
            String[] words = line.split(" ");
            int count = 0;

            for (String word : words) {
                if (isPalindrome(word)) {
                    count++;
                }
            }

            System.out.println("Line " + lineNumber + ": " + count + " palindrome(s)");
            lineNumber++;
        }

        reader.close();
    }

    public static boolean isPalindrome(String word) {
        word = word.toLowerCase();
        int i = 0, j = word.length() - 1;

        while (i < j) {
            if (word.charAt(i) != word.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }

        return word.length() > 0; // Only count non-empty palindromes
    }
}
















import java.io.*;

public class DebarCheck {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("students.txt"));
        BufferedWriter debaredWriter = new BufferedWriter(new FileWriter("debared.txt"));
        BufferedWriter notDebaredWriter = new BufferedWriter(new FileWriter("not_debared.txt"));

        String line;
        while ((line = reader.readLine()) != null) {
            String[] data = line.split(" ");
            int attendance = Integer.parseInt(data[4]);

            if (attendance < 70) {
                debaredWriter.write(line);
                debaredWriter.newLine();
            } else {
                notDebaredWriter.write(line);
                notDebaredWriter.newLine();
            }
        }

        reader.close();
        debaredWriter.close();
        notDebaredWriter.close();

        System.out.println("Debared and not-debared student lists generated successfully.");
    }























#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

using namespace std;

struct Item {
    int index;
    double value;
    double weight;
    double ratio;
};

bool compare(Item a, Item b) {
    return a.ratio > b.ratio;
}

int main() {
    int n;
    cin >> n;

    vector<double> weights(n), values(n);
    for (int i = 0; i < n; i++) cin >> weights[i];
    for (int i = 0; i < n; i++) cin >> values[i];

    double capacity;
    cin >> capacity;

    vector<Item> items;

    for (int i = 0; i < n; i++) {
        items.push_back({i + 1, values[i], weights[i], values[i] / weights[i]});
    }

    sort(items.begin(), items.end(), compare);

    double totalValue = 0.0;
    vector<pair<int, double>> selectedItems;

    for (const auto &item : items) {
        if (capacity >= item.weight) {
            capacity -= item.weight;
            totalValue += item.value;
            selectedItems.push_back({item.index, item.weight});
        } else {
            totalValue += item.ratio * capacity;
            selectedItems.push_back({item.index, capacity});
            break;
        }
    }

    cout << fixed << setprecision(2);
    cout << "Maximum value : " << totalValue << endl;
    cout << "item-weight" << endl;
    for (auto &it : selectedItems) {
        cout << it.first << "-" << it.second << endl;
    }

    return 0;
}













#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    int n;
    cin >> n;

    priority_queue<int, vector<int>, greater<int>> minHeap;

    for (int i = 0; i < n; i++) {
        int size;
        cin >> size;
        minHeap.push(size);
    }

    int totalCost = 0;

    while (minHeap.size() > 1) {
        int first = minHeap.top(); minHeap.pop();
        int second = minHeap.top(); minHeap.pop();

        int mergeCost = first + second;
        totalCost += mergeCost;
        minHeap.push(mergeCost);
    }

    cout << "Minimum computation cost: " << totalCost << endl;

    return 0;
}






#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Activity {
    int index;
    int start;
    int finish;
};

bool compare(Activity a, Activity b) {
    return a.finish < b.finish;
}

int main() {
    int n;
    cin >> n;

    vector<int> startTimes(n), finishTimes(n);
    vector<Activity> activities;

    for (int i = 0; i < n; i++) {
        cin >> startTimes[i];
    }

    for (int i = 0; i < n; i++) {
        cin >> finishTimes[i];
    }

    for (int i = 0; i < n; i++) {
        activities.push_back({i + 1, startTimes[i], finishTimes[i]});
    }

    sort(activities.begin(), activities.end(), compare);

    vector<int> selected;
    int lastFinish = 0;

    for (const auto &activity : activities) {
        if (activity.start >= lastFinish) {
            selected.push_back(activity.index);
            lastFinish = activity.finish;
        }
    }

    cout << "No. of non-conflicting activities: " << selected.size() << endl;
    cout << "List of selected activities: ";
    for (int idx : selected) {
        cout << idx << " ";
    }
    cout << endl;

    return 0;
}




public class EvenPositionPrinter extends Thread {
    private String input;

    public EvenPositionPrinter(String input) {
        this.input = input;
    }

    @Override
    public void run() {
        for (int i = 0; i < input.length(); i += 2) {
            System.out.println("Character at position " + i + ": " + input.charAt(i));
            try {
                Thread.sleep(1000); // suspend for 1000 milliseconds
            } catch (InterruptedException e) {
                System.out.println("Thread was interrupted.");
            }
        }
    }

    public static void main(String[] args) {
        String str = "HelloWorld"; // You can change this to any string
        EvenPositionPrinter thread = new EvenPositionPrinter(str);
        thread.start();
    }
}

class WordPrinter extends Thread {
    private String word;
    private String threadName;

    public WordPrinter(String threadName, String word) {
        this.threadName = threadName;
        this.word = word;
    }

    @Override
    public void run() {
        for (char c : word.toCharArray()) {
            System.out.println(threadName + "[" + c + "]");
            try {
                Thread.sleep(1000); // pause for 1000 ms
            } catch (InterruptedException e) {
                System.out.println(threadName + " was interrupted.");
            }
        }
    }

    public static void main(String[] args) {
        Thread t1 = new WordPrinter("T1", "HELLO");
        Thread t2 = new WordPrinter("T2", "WORLD");

        t1.start();
        t2.start();
    }
}


